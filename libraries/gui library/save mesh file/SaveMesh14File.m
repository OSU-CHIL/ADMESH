function SaveMesh14File(varargin)
% SaveMesh14File - GUI Callback that saves mesh output by ADmesh
%
% Syntax:  SaveMesh14File(varargin)
%
% Inputs:
%    guiFig - handle that identifies the figure
%
% Outputs:
%    non
%
% Other m-files required: none
% Subfunctions: none
% MAT-files required: none
%
% Author: Dustin West
% The Ohio State University
% email address: dww.425@gmail.com
% August 2013; Last revision: 08-August-2013

%--------------------------- BEGIN CODE -----------------------------------

%--------------------------------------------------------------------------
% Get GUI data
%--------------------------------------------------------------------------
app = varargin{1};

%--------------------------------------------------------------------------
% Assign MESH data struct
%--------------------------------------------------------------------------
MESH = app.MESH;

%--------------------------------------------------------------------------
% Check for variables
%--------------------------------------------------------------------------
if isempty(MESH) % User has not run ADmesh yet
    warndlg('No mesh to save....','Error');
    return
end

%--------------------------------------------------------------------------
% Ask user for file name
%--------------------------------------------------------------------------
app.ProgressBarButton.Text = 'Save Mesh File As....'; drawnow;

[file,path] = uiputfile('*.14','Save Mesh File As');

% If user cancels
if ~file
    app.ProgressBarButton.Text = 'Ready'; drawnow;
    return
end

%--------------------------------------------------------------------------
% If CPPLAT & CPPLON exist, ask user what coordinate system they would
% like to save their file in.
%--------------------------------------------------------------------------
if isfield(MESH,'cpplon') && ~isempty(MESH.cpplon)
    
    msg = 'What coordinate system would you like to write your data in?';
    choice = uiconfirm(app.UIFigure,msg,'ADMESH',...
        'Options',{'Geographic','Cartesian'},'DefaultOption',1,'Icon','Warning');
    drawnow; pause(0.05);  % this innocent line prevents the Matlab hang
    
    switch choice
        
        case 'Geographic' % Convert back to geographic coordinates
            
            % Convert PTS data structure
            MESH = Meters2Geo(MESH);
            
    end
    
end

app.ProgressBarButton.Text = 'Creating file....'; drawnow;

%--------------------------------------------------------------------------
% Open file and begin writing
%--------------------------------------------------------------------------
fid = fopen([path,file],'w');

%--------------------------------------------------------------------------
% Write grid name
%--------------------------------------------------------------------------
Grid_Name = inputdlg('Enter a grid name for your mesh file:', 'ADmesh', [1 50]);

fprintf(fid,'%s\n',[Grid_Name{:}, ' - Generated by ADmesh']);

%--------------------------------------------------------------------------
% Write number of elements and number of points
%--------------------------------------------------------------------------
NE = size(MESH.ConnectivityList,1); NP = size(MESH.Points,1);
fprintf(fid,'%i %i\n',[NE ; NP]);

%--------------------------------------------------------------------------
% Write points
%--------------------------------------------------------------------------
app.ProgressBarButton.Text = 'Writing nodal coordinates....'; drawnow;

fprintf(fid,'%10.0i %5.10e %5.10e %5.10e\n', [(1:NP)', MESH.Points]');

%--------------------------------------------------------------------------
% Write triangulation
%--------------------------------------------------------------------------
app.ProgressBarButton.Text = 'Writing connectivity list....'; drawnow;

fprintf(fid,'%5.0i %4.0i %6.0i %6.0i %6.0i\n',...
    [(1:NE)', 3*ones(NE,1), MESH.ConnectivityList]');

%--------------------------------------------------------------------------
% Write out boundary conditions
%--------------------------------------------------------------------------
if isfield(MESH,'Constraints')
    
    %----------------------------------------------------------------------
    % Write out open ocean boundaries
    %----------------------------------------------------------------------
    if any([MESH.Constraints.num] == -1)
        
        % find indices
        ix = find([MESH.Constraints.num] == -1);
        
        % # of boundary segments
        NOPE = numel(ix);
        fprintf(fid,'%s\n', [num2str(NOPE), ' = Number of open boundaries']);
        
        % Total # of nodes
        NETA = size(vertcat(MESH.Constraints(ix).nodeStr),1);
        fprintf(fid,'%s\n', [num2str(NETA), ' = Total number of open boundary nodes']);
        
        for i = 1:NOPE
            
            % # nodes in segments
            NVDLL = size(MESH.Constraints(ix(i)).nodeStr,1);
            
            fprintf(fid,'%s\n',[num2str(NVDLL), ' = Number of nodes for open boundary ' num2str(i)]);
            
            % Nodal segment
            fprintf(fid,'%i\n',MESH.Constraints(ix(i)).nodeStr');
            
        end
        
    else
        
        % Apply no boundary conditions
        NOPE = 0;
        text = [num2str(NOPE), ' = Number of open boundaries'];
        fprintf(fid,'%s\n', text);
        
        NETA = 0;
        text = [num2str(NETA), ' = Total number of open boundary nodes'];
        fprintf(fid,'%s\n', text);
        
    end
    
    if any([MESH.Constraints.num] == 18)
        ix = find([MESH.Constraints.num] == 18);
        if ~isempty(app.CSParams)
            CSParams = app.CSParams;
            data = cellfun(@(x) [x.H, x.TW, x.BW],CSParams,'UniformOutput',0);
            for i = 1 : length(ix)
                if length(MESH.Constraints(ix(i)).nodeStr) ~= size(data{i},1)
                    error;
                end
                MESH.Constraints(ix(i)).data = data{i};
                MESH.Constraints(ix(i)).num = 6;
            end
            % Nodal segment
        end

        if any(cellfun(@(x) size(x,2),{MESH.Constraints(ix).data}))
            for i = 1 : length(ix)
                if size(MESH.Constraints(ix(i)).data,2) == 3
                    MESH.Constraints(ix(i)).num = 6;
                end
            end
        end
    end
    %----------------------------------------------------------------------
    % Write out constraints
    %----------------------------------------------------------------------
    if any([MESH.Constraints.num] ~= -1)
        
        app.ProgressBarButton.Text = 'Writing normal flow specified boundary data....'; drawnow;

        % find all indices
        ix = find([MESH.Constraints.num] ~= -1);
        
        % # of boundary segments
        NBOU = numel(ix);
        fprintf(fid,'%s\n', [num2str(NBOU), ' = Number of normal flow boundaries']);
        
        % Total # of nodes
        NVEL = 0;
        for i = 1:NBOU
            NVEL = size(MESH.Constraints(ix(i)).nodeStr,1) + NVEL;
        end
        fprintf(fid,'%s\n', [num2str(NVEL), ' = Total number of boundary nodes']);
        
        for i = 1:NBOU
            
            % Assign constraint value
            ibtype = MESH.Constraints(ix(i)).num;
            
            % Number of nodes
            nvell = size(MESH.Constraints(ix(i)).nodeStr,1);
            
            if ibtype == 0 % external boundary
                
                % # nodes in segments
                fprintf(fid,'%s\n', [num2str([nvell  ibtype]) ' = Number of nodes for land boundary ' num2str(i)]);

                % Nodal segment
                fprintf(fid,'%i\n',MESH.Constraints(ix(i)).nodeStr');
                
            elseif ibtype == 1
                
                % # nodes in segments
                fprintf(fid,'%s\n', [num2str([nvell  ibtype]) ' = Number of nodes for island boundary ' num2str(i)]);
                
                
                % Nodal segment
                fprintf(fid,'%i\n',MESH.Constraints(ix(i)).nodeStr');
                
                
            elseif any(ibtype == [3 13 23]) % Write external barrier boundary data
                
                % # nodes in segments
                fprintf(fid,'%s\n', [num2str([nvell  ibtype]) ' = Number of nodes for external barrier ' num2str(i)]);
                
                % Nodal segment
                fprintf(fid,'%i %e %e\n', [MESH.Constraints(ix(i)).nodeStr MESH.Constraints(ix(i)).data]');
                
            elseif any(ibtype == [18 19 17]) % Write channel line boundary data
                % # nodes in segments
                fprintf(fid,'%s\n', [num2str([nvell  ibtype]) ' = Number of nodes for channel line boundary ' num2str(i)]);
                
                % Nodal segment
                fprintf(fid,'%i %e\n',[MESH.Constraints(ix(i)).nodeStr MESH.Constraints(ix(i)).data]');

            elseif ibtype == 6
                % # nodes in segments
                fprintf(fid,'%s\n', [num2str([nvell  ibtype]) ' = Number of nodes for channel line boundary 6' num2str(i)]);

                % Nodal segment
                fprintf(fid,'%i %e %e %e\n',[MESH.Constraints(ix(i)).nodeStr MESH.Constraints(ix(i)).data]');
                
            elseif any(ibtype == [4 24]) % Read in internal barrier boundary data
                
                % # nodes in segments
                fprintf(fid,'%s\n', [num2str([nvell  ibtype]) ' = Number of nodes for internal barrier ' num2str(i)]);

                % Nodal segment
                fprintf(fid,'%i %i %e %e %e\n',[MESH.Constraints(ix(i)).nodeStr MESH.Constraints(ix(i)).data]');

            elseif any(ibtype == [5 25]) % Read in internal barrier boundary data
                
                % # nodes in segments
                fprintf(fid,'%s\n', [num2str([nvell  ibtype]) ' = Number of nodes for internal barrier ' num2str(i)]);
                
                
                % Nodal segment
                fprintf(fid,'%i %i %e %e %e %e %e %e\n',[MESH.Constraints(ix(i)).nodeStr MESH.Constraints(ix(i)).data]');
                
            end
            
        end
        
    end
    
else
    
    % Apply no boundary conditions
    NOPE = 0;
    text = [num2str(NOPE), ' = Number of open boundaries'];
    fprintf(fid,'%s\n', text);
    
    
    NETA = 0;
    text = [num2str(NETA), ' = Total number of open boundary nodes'];
    fprintf(fid,'%s\n', text);
    
    % Number of normal flowm specified boundaries
    NBOU = 0;
    text = [num2str(NBOU), ' = Number of normal flow specified boundaries'];
    fprintf(fid,'%s\n', text);
    
    % Total number of land boundary nodes
    NVEL = 0;
    text = [num2str(NVEL), ' = Total number of land boundary nodes'];
    fprintf(fid,'%s\n', text);
    
end

%--------------------------------------------------------------------------
% Close file. Let user know file is complete.
%--------------------------------------------------------------------------
fclose(fid);

app.ProgressBarButton.Text = 'Mesh file complete!'; drawnow;
pause(1);

app.ProgressBarButton.Text = 'Ready'; drawnow;

